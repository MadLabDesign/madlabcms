{"componentChunkName":"component---src-templates-page-js","path":"/post/four-ways-to-style-react-components","webpackCompilationHash":"c8ef4a075e1b2dd52ce8","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"excerpt":"<p>There are four different options to style React components. All depend on your personal preferences and the specific complexity of your application.</p>\n","wordpress_id":35,"date":"15th Jun 2019 19:56","title":"Four ways to style react components","content":"\n<p>This is the fourth part of my React tutorials. See the Intro to react.js&nbsp;<a href=\"https://medium.com/p/a37696fd99af\" target=\"_blank\" rel=\"noreferrer noopener\">here</a></p>\n\n\n\n<p>There are four different options to style React components. All depend on your personal preferences and the specific complexity of your application.</p>\n\n\n\n<p>If you want to add just a few style properties, then&nbsp;<strong>inline styling</strong>&nbsp;is the best option.</p>\n\n\n\n<p>When you want to reuse your style properties in the same file then&nbsp;<strong>style-component</strong>&nbsp;are perfect.</p>\n\n\n\n<p>When your application is more complex I recommend&nbsp;<strong>CSS Modules</strong>&nbsp;or regular&nbsp;<strong>CSS stylesheets.</strong></p>\n\n\n\n<h4 id=\"a8cf\">1. CSS Stylesheet</h4>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/4eb51f0981efa884dcdf12286b493798?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<ul><li>Simply import css file&nbsp;<code>import './DottedBox.css'</code>&nbsp;so you can have a separate css file for each component.</li></ul>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/9d15084a345f9db0ebb25fada293318b?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<h4 id=\"aeb1\">2. Inline&nbsp;styling</h4>\n\n\n\n<p>In React, inline styles are not specified as a string. Instead they are specified with an object whose&nbsp;<strong>key</strong>&nbsp;is the&nbsp;<strong>camelCased</strong>&nbsp;version of the style name, and whose value is the styleâ€™s value, usually&nbsp;a string.</p>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/69cadb5d8cf93b1b2e0def348d925812?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<ul><li>We can create a variable that stores style properties and then pass it to the element like&nbsp;<code>style={nameOfvariable}</code></li><li>We can also pass the styling directly&nbsp;<code>style={{color: 'pink'}}</code></li></ul>\n\n\n\n<h4 id=\"2c46\">3. CSS&nbsp;Modules</h4>\n\n\n\n<p>A CSS Module is a CSS file in which all class names and animation names are scoped locally by default. Great article about css modules&nbsp;<a href=\"https://medium.com/@pioul/modular-css-with-react-61638ae9ea3e#.re1pdcz87\" target=\"_blank\" rel=\"noreferrer noopener\">here</a>.</p>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/b83886453cba7549feaca7d8aa6c3f26?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<ul><li>Similar to css we import css file&nbsp;<code>import styles './DashedBox.css'</code></li><li>then we access to className as we access to object</li></ul>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/1777332b490690df93f44298e91dadab?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<p><code>:local(.className)</code>-this when you use create-react-app because of webpack configurations</p>\n\n\n\n<p><code>.className</code>-this if you use your own react boilerplate.</p>\n\n\n\n<p>To make CSS modules work with Webpack you only have to include the modules mentioned above and add the following loader to your&nbsp;<code>webpack.config.js</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>. . .{  test: /\\.css$/,  loader: 'style!css-loader?modules&amp;importLoaders=1&amp;localIdentName=[name]__[local]___[hash:base64:5]' }. . .</code></pre>\n\n\n\n<h4 id=\"d230\">4. Styled-components ðŸ’…</h4>\n\n\n\n<p><a href=\"https://github.com/styled-components/styled-components\" rel=\"noreferrer noopener\" target=\"_blank\">Styled-components</a>&nbsp;is a library for React and React Native that allows you to use component-level styles in your application that are written with a mixture of JavaScript and CSS</p>\n\n\n\n<figure><iframe width=\"700\" height=\"250\" allowfullscreen=\"\" src=\"https://codeburst.io/media/f7fba08d74ba33f9f4ae52157fcf1a7e?postId=ac6f323da822\"></iframe></figure>\n\n\n\n<ul><li>First we need to install&nbsp;<code>styled-components</code>&nbsp;library</li><li><code>npm install styled-components --save</code></li><li>Now we can create a variable by selecting a particular html element where we store our style keys&nbsp;<code>const Div = styled.htmlElemnet`color: pink`</code></li><li>Then we use the name of our variable as a wrapper&nbsp;<code>&lt;Div&gt;&lt;/Div&gt;</code>&nbsp;kind of react component:)</li><li>Tips to use emoji icons key shortcut&nbsp;<code>CTRL+CMD+SPACE</code>&nbsp;ðŸ’¡</li></ul>\n\n\n\n<p>All these ways of styling react components have pros and cons.</p>\n\n\n\n<p>It all boils down to both your own personal preferences and the specific complexity of your application.</p>\n\n\n\n<p>I suggest you to make 4 projects, each using different way of style.</p>\n\n\n\n<p>Enjoy ðŸ˜ƒ</p>\n\n\n\n<p>Next tutorial&nbsp;<a href=\"https://medium.com/p/8328bd5f1b3c/\" target=\"_blank\" rel=\"noreferrer noopener\">The Component Lifecycle</a><br></p>\n","slug":"four-ways-to-style-react-components"}}}